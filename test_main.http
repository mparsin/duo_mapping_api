# Test your FastAPI endpoints

### Health Check
GET http://localhost:8000/api/health
Accept: application/json

###

### Get all categories (should include percent_mapped field)
GET http://localhost:8000/api/categories
Accept: application/json

###

### Get individual category by ID (should return category 9)
GET http://localhost:8000/api/categories/9
Accept: application/json

###

### Get individual category by ID (should return category 1)
GET http://localhost:8000/api/categories/1
Accept: application/json

###

### Get non-existent category (should return 404)
GET http://localhost:8000/api/categories/999
Accept: application/json

###

### Test percent_mapped calculation - Map a line first
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 1
}

###

### Check categories after mapping (percent_mapped should be updated)
GET http://localhost:8000/api/categories
Accept: application/json

###

### Test percent_mapped calculation - Clear the mapping
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 0
}

###

### Check categories after unmapping (percent_mapped should be updated)
GET http://localhost:8000/api/categories
Accept: application/json

###

### Recalculate percent_mapped for all categories (useful for initial data setup)
POST http://localhost:8000/api/categories/recalculate-percent-mapped
Accept: application/json

###

### Get sub-categories for category 2
GET http://localhost:8000/api/categories/2/sub-categories
Accept: application/json

###

### Get sub-categories for non-existent category (should return 404)
GET http://localhost:8000/api/categories/999/sub-categories
Accept: application/json

###

### Get specific sub-category by ID
GET http://localhost:8000/api/categories/1/sub-categories/1
Accept: application/json

###

### Get non-existent sub-category (should return 404)
GET http://localhost:8000/api/categories/1/sub-categories/999
Accept: application/json

###

### Get sub-category from non-existent category (should return 404)
GET http://localhost:8000/api/categories/999/sub-categories/1
Accept: application/json

###

### Create or update sub-category with comment
PUT http://localhost:8000/api/categories/1/sub-categories/10
Content-Type: application/json

{
  "name": "Test Sub-Category",
  "comment": "This is a test comment for the sub-category"
}

###

### Create or update sub-category without comment
PUT http://localhost:8000/api/categories/1/sub-categories/11
Content-Type: application/json

{
  "name": "Test Sub-Category No Comment"
}

###

### Update existing sub-category with new comment
PUT http://localhost:8000/api/categories/1/sub-categories/10
Content-Type: application/json

{
  "name": "Updated Sub-Category Name",
  "comment": "Updated comment for this sub-category"
}

###

### Create sub-category with null comment (should work)
PUT http://localhost:8000/api/categories/1/sub-categories/12
Content-Type: application/json

{
  "name": "Sub-Category with Null Comment",
  "comment": null
}

###

### Try to create sub-category for non-existent category (should return 404)
PUT http://localhost:8000/api/categories/999/sub-categories/13
Content-Type: application/json

{
  "name": "Test Sub-Category",
  "comment": "This should fail"
}

###

### Get lines for category 1
GET http://localhost:8000/api/categories/1/lines
Accept: application/json

###

### Get lines for non-existent category (should return 404)
GET http://localhost:8000/api/categories/999/lines
Accept: application/json

###

### Get all ERP tables
GET http://localhost:8000/api/tables
Accept: application/json

###

### Get columns for ERP table 1
GET http://localhost:8000/api/tables/1/columns
Accept: application/json

###

### Get columns for non-existent ERP table (should return 404)
GET http://localhost:8000/api/tables/999/columns
Accept: application/json

###

### Update line with ID 1 (should update if exists)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 1
}

###

### Update line with ID 1 including comment
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 1,
  "comment": "This is a test comment for the mapping"
}

###

### Update line with only comment (no table/column changes)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "comment": "Updated comment only"
}

###

### Update non-existent line with ID 999 (should return 404)
PATCH http://localhost:8000/api/lines/999
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 1
}

###

### Update line with invalid table_id (should return 404)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 999,
  "column_id": 1
}

###

### Update line with invalid column_id (should return 404)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 999
}

###

### Update line with column that doesn't belong to table (should return 400)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 2
}

###

### Update line with only table_id (column_id not provided)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1
}

###

### Update line with table_id and null column_id
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": null
}

###

### Clear all table_ids for the category (set table_id to null)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": null
}

###

### Clear all table_ids for the category (set table_id to 0)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 0
}

###

### Clear all column_ids for the category (set column_id to 0)
PATCH http://localhost:8000/api/lines/1
Content-Type: application/json

{
  "table_id": 1,
  "column_id": 0
}

###

### Search columns by name (exact match)
GET http://localhost:8000/api/search-columns?columnName=name
Accept: application/json

###

### Search columns by name (partial match)
GET http://localhost:8000/api/search-columns?columnName=id
Accept: application/json

###

### Search columns by name (case insensitive)
GET http://localhost:8000/api/search-columns?columnName=NAME
Accept: application/json

###

### Search columns by name (no matches)
GET http://localhost:8000/api/search-columns?columnName=nonexistent
Accept: application/json

###

### Search columns by name (empty parameter - should return 400)
GET http://localhost:8000/api/search-columns?columnName=
Accept: application/json

###

### Search columns by name (missing parameter - should return 422)
GET http://localhost:8000/api/search-columns
Accept: application/json

###

### Find table matches with multiple column names
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["name", "id", "description", "type"]
}

###

### Find table matches with single column name
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["name"]
}

###

### Find table matches with case insensitive search
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["NAME", "Id", "DESCRIPTION"]
}

###

### Find table matches with partial matches
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["table", "column", "category"]
}

###

### Find table matches with empty list (should return 400)
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": []
}

###

### Find table matches with no valid column names (should return 400)
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["", "   ", "  "]
}

###

### Find table matches with non-existent columns (should return empty list)
POST http://localhost:8000/api/find-table-matches
Content-Type: application/json

{
  "column_names": ["nonexistent_column_1", "nonexistent_column_2"]
}

###
