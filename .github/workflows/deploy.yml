name: Deploy to AWS Lambda

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  FUNCTION_NAME: duo-mapping-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run basic tests
      run: |
        python -c "import main; print('‚úÖ Main module imports successfully')"
        python -c "import database; print('‚úÖ Database module imports successfully')"
        python -c "import schemas; print('‚úÖ Schemas module imports successfully')"
        python -c "import lambda_function; print('‚úÖ Lambda function imports successfully')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libpq-dev zip
    
    - name: Create deployment package
      run: |
        echo "üöÄ Creating deployment package..."
        
        # Create temp directory for package
        mkdir -p package
        
        # Install dependencies
        pip install --platform linux_x86_64 \
                   --target package \
                   --implementation cp \
                   --python-version 3.11 \
                   --only-binary=:all: \
                   --upgrade \
                   -r requirements.txt
        
        # Copy application files
        cp main.py database.py schemas.py lambda_function.py package/
        
        # Create ZIP package
        cd package
        zip -r ../deployment-package.zip .
        cd ..
        
        # Check package size
        SIZE=$(stat -c%s deployment-package.zip)
        SIZE_MB=$((SIZE / 1024 / 1024))
        echo "üì¶ Package size: ${SIZE_MB}MB"
        
        if [ $SIZE_MB -gt 50 ]; then
          echo "‚ö†Ô∏è Warning: Package size exceeds 50MB"
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to Lambda
      run: |
        echo "üöÄ Deploying to AWS Lambda..."
        
        # Update Lambda function
        aws lambda update-function-code \
          --function-name ${{ env.FUNCTION_NAME }} \
          --zip-file fileb://deployment-package.zip
        
        # Wait for update to complete
        echo "‚è≥ Waiting for deployment to complete..."
        aws lambda wait function-updated \
          --function-name ${{ env.FUNCTION_NAME }}
        
        echo "‚úÖ Deployment completed successfully!"
    
    - name: Test deployment
      run: |
        echo "üß™ Testing deployed API..."
        
        # Get function info
        FUNCTION_INFO=$(aws lambda get-function --function-name ${{ env.FUNCTION_NAME }})
        echo "üìä Function details:"
        echo $FUNCTION_INFO | jq '.Configuration | {FunctionName, LastModified, CodeSize, Runtime}'
        
        # Test API endpoints
        API_URL="https://xwrhlmtfk9.execute-api.us-east-1.amazonaws.com/prod"
        
        echo "üîç Testing API endpoints..."
        
        # Test root endpoint
        ROOT_RESPONSE=$(curl -s "$API_URL/")
        echo "Root endpoint: $ROOT_RESPONSE"
        
        # Test health endpoint
        HEALTH_RESPONSE=$(curl -s "$API_URL/api/health")
        echo "Health endpoint: $HEALTH_RESPONSE"
        
        # Verify responses contain expected content
        if echo "$ROOT_RESPONSE" | grep -q "Duo Mapping API"; then
          echo "‚úÖ Root endpoint working"
        else
          echo "‚ùå Root endpoint failed"
          exit 1
        fi
        
        if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
          echo "‚úÖ Health endpoint working"
        else
          echo "‚ùå Health endpoint failed"
          exit 1
        fi
        
        echo "üéâ All tests passed! Deployment successful!"
    
    - name: Cleanup
      if: always()
      run: |
        rm -f deployment-package.zip
        rm -rf package
